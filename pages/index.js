import Head from "next/head";
//import Image from "next/image";
import styles from "@/styles/Home.module.css";
import { useEffect, useState } from "react";

export default function Home() {
const [products, setProducts] = useState([]);
const [loading, setLoading] = useState(true);
const [currency, setCurrency] = useState("₹"); // for currency 


useEffect(() => {
  const fetchProducts = async () => {
    setLoading(true); 

   // const consumerKey = "ck_b251d5b6d919efd726e32c1a5051ade4f380e000";
    //const consumerSecret = "cs_3c2c2dae7f06cf87b3bded947bfb4b92413b19a4";
   // const credentials = btoa(`${consumerKey}:${consumerSecret}`);

    const wp_url = process.env.NEXT_PUBLIC_WC_API_URL;
    const consumerKey = process.env.NEXT_PUBLIC_WC_CONSUMER_KEY;
    const consumerSecret = process.env.NEXT_PUBLIC_WC_CONSUMER_SECRET;
    const credentials = btoa(`${consumerKey}:${consumerSecret}`);
   
    try {

     // To display Currrenty, this is the optional part to display INR  -- BEG
      const settingsResponse = await fetch(`${wp_url}/wp-json/wc/v3/settings/general`, {
        method: "GET",
        headers: {
          "Authorization": `Basic ${credentials}`,
          "Content-Type": "application/json",
        },
      });

      if (settingsResponse.ok) {
        const settingsData = await settingsResponse.json();
        const storeCurrency = settingsData.find(setting => setting.id === "woocommerce_currency")?.value || "₹";
        setCurrency(storeCurrency);
      }

    // Currency Part End..

      const response = await fetch(`${wp_url}/wp-json/wc/v3/products?per_page=6`, {
        method: "GET",
        headers: {
          "Authorization": `Basic ${credentials}`,
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        console.error("Error: ", await response.text()); // Debugging
        throw new Error(`HTTP error! Status: ${response.status}`);
      }

      const data = await response.json();
      console.log('List:', data)

        // Fetch image URLs for custom_image1
        const updatedProducts = await Promise.all(
          data.map(async (product) => {
            const customImageMeta = product.meta_data.find(meta => meta.key === "custom_image1");
            const customImageId = customImageMeta ? customImageMeta.value : null;

            let imageUrl = null;
            if (customImageId) {
              const imageResponse = await fetch(`${wp_url}/wp-json/wp/v2/media/${customImageId}`);
              if (imageResponse.ok) {
                const imageData = await imageResponse.json();
               // imageUrl = imageData.source_url; // Extracting the image URL
                imageUrl = imageData.media_details.sizes?.thumbnail?.source_url || imageData.source_url;
                //console.log("IMG:", imageUrl);
              }
            }
          
            return { ...product, customImageUrl: imageUrl };
          })
        );


      setProducts(updatedProducts);
    } catch (error) {
      console.error("Error fetching products:", error);
    }
    finally {
      setLoading(false); // Stop loading
    }
  };

  fetchProducts();
}, []);


//console.log("products", products)
  return (
    <>
      <Head>
        <title>NextJS - WooShop</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
  
      <div className={styles.container}>
      <h1 className={`${styles.py30} ${styles.textCenter}`}> Product List</h1>
      </div>
    {/* Show Loading Message or Spinner */}
    {loading ? (
      <div className={styles.loaderContainer}>
        <p>Loading products...</p>
      </div>
    ) : (
      <div className={`${styles.gridContainer} ${styles.pb60}`}>  
      {products.map((product) => (
                <div key={product.id} className={styles.gridItem}>
                  {product.customImageUrl ? (
                    <div>
                      <img src={product.customImageUrl} className={styles.responsiveImage} alt="Custom Image" />
                    </div>
                  ) : (
                    <img src={product.images[0]?.src} alt={product.name} className={styles.responsiveImage}/>
                  )}
          
                  <h2>{product.name}</h2>
                  <p>Price: {product.price} {currency}</p>

                </div>
              ))}
      </div>
       )}
    </>
  );
}
